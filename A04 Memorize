class User < ActiveRecord::Base
  validates :username, :password_digest, :session_token, presence: true
  validates :password, length: { minimum: 6, allow_nil: true }
  attr_reader :password
  has_many :links
  has_many :comments
  after_initialize :ensure_session_token
  def self.find_by_credentials(username, password)
    user = User.find_by(username: username)
    return nil unless user && user.valid_password?(password)
    user
  end
  def password=(password)
    @password = password
    self.password_digest = BCrypt::Password.create(password)
  end
  def valid_password?(password)
    BCrypt::Password.new(self.password_digest).is_password?(password)
  end
  def reset_token!
    self.session_token = SecureRandom.urlsafe_base64(16)
    self.save!
    self.session_token
  end

  def ensure_session_token
    self.session_token ||= SecureRandom.urlsafe_base64(16)
  end
end

class Link < ActiveRecord::Base
  validates :title, :url, :user, presence: true
  belongs_to :user,
  has_many :comments,
end

class Comment < ActiveRecord::Base
  validates :body, :link, :user, presence: true
  belongs_to :user
  belongs_to :link
end

module ApplicationHelper
    quotes<input
        type=\quoteshidden\quotes
        name=\quotesauthenticity_token\quotes
        value=\quoteshashtag{ form_authenticity_token }\quotes>quotes.html_safe
  end
end

class ApplicationController < ActionController::Base
  protect_from_forgery with: :exception
  helper_method :current_user, :signed_in?
  private
  def current_user
    @current_user ||= User.find_by_session_token(session[:session_token])
  end
  def signed_in?
    !!current_user
  end
  def sign_in(user)
    @current_user = user
    session[:session_token] = user.reset_token!
  end
  def sign_out
    current_user.try(:reset_token!)
    session[:session_token] = nil
  end
  def require_signed_in!
    redirect_to new_session_url unless signed_in?
  end
end

class UsersController < ApplicationController
  def new
    @user = User.new
  end
  def create
    @user = User.new(user_params)
    if @user.save
      sign_in(@user)
      redirect_to links_url
    else
      flash.now[:errors] = @user.errors.full_messages
      render :new
    end
  end
  private
  def user_params
    params.require(:user).permit(:password, :username)
  end
end

class SessionsController < ApplicationController
  def new
  end
  def create
    user = User.find_by_credentials(
      params[:user][:username],
      params[:user][:password]
    )
    if user
      sign_in(user)
      redirect_to links_url
    else
      flash.now[:errors] = [quotesInvalid username or passwordquotes]
      render :new
    end
  end
  def destroy
    sign_out
    redirect_to new_session_url
  end
end

class LinksController < ApplicationController
  before_filter :require_signed_in!
  def index
    @links = Link.all
  end
  def show
    @link = Link.find(params[:id])
  end
  def new
    @link = Link.new
  end
  def create
    @link = Link.new(link_params)
    @link.user_id = current_user.id
    if @link.save
      redirect_to link_url(@link)
    else
      flash.now[:errors] = @link.errors.full_messages
      render :new
    end
  end
  def edit
    @link = Link.find(params[:id])
  end
  def update
    @link = current_user.links.find(params[:id])
    if @link.update_attributes(link_params)
      redirect_to link_url(@link)
    else
      flash.now[:errors] = @link.errors.full_messages
      render :edit
    end
  end
  def destroy
    link = Link.find(params[:id])
    link.destroy
    redirect_to links_url
  end
  private
  def link_params
    params.require(:link).permit(:title, :url)
  end
end

class CommentsController < ApplicationController
  before_filter :require_signed_in!
  def create
    comment = Comment.new(comment_params)
    comment.user_id = current_user.id
    comment.save
    flash[:errors] = comment.errors.full_messages
    redirect_to link_url(comment.link)
  end
  def destroy
    comment = Comment.find(params[:id])
    comment.destroy
    redirect_to link_url(comment.link_id)
  end
  private
  def comment_params
    params.require(:comment).permit(:body, :link_id)
  end
end

views>links>edit.html.erb
<h2>Edit Link</h2>
<form action=quotes<%= link_url(@link) %>quotes method=quotespostquotes>
  <%= auth_token_input %>
  <input type=quoteshiddenquotes name=quotes_methodquotes value=quotespatchquotes>
  <label>
    Title
    <input type=quotestextquotes name=quoteslink[title]quotes value=quotes<%= @link.title %>quotes>
  </label>
  <label>
    URL
    <input type=quotestextquotes name=quoteslink[url]quotes value=quotes<%= @link.url %>quotes>
  </label>
  <input type=quotessubmitquotes value=quotesUpdate Linkquotes>
</form>

views>links>index.html.erb
<h1>Links</h1>
<ul>
  <% @links.each do |link|%>
    <li><%= link_to link.title, link_url(link) %> : <%= link.url %></li>
  <% end %>
</ul>
<%= link_to quotesNew Linkquotes, new_link_url %>

views>links>new.html.erb

<h2>New Link</h2>
<form action=quotes<%= links_url %>quotes method=quotespostquotes>
  <%= auth_token_input %>
  <label>
    Title
    <input type=quotestextquotes name=quoteslink[title]quotes value=quotes<%= @link.title %>quotes id=quotestitlequotes>
  </label>
  <label>
    URL
    <input type=quotestextquotes name=quoteslink[url]quotes value=quotes<%= @link.url %>quotes id=quotesurlquotes>
  </label>
  <input type=quotessubmitquotes value=quotesCreate New Linkquotes>
</form>

views>links>show.html.erb

<h2><%= @link.title %></h2>
By: <%= @link.user.username %>
<%= link_to @link.url, @link.url %>
<h3>Comments</h3>
<ul>
  <% @link.comments.each do |comment| %>
    <li>
      <%= comment.body %>
      <%= button_to quotesRemove Commentquotes, comment_url(comment), method: :delete %>
    </li>
  <% end %>
</ul>
<hr>
<h3>Add Comment</h3>
<form action=quotes<%= comments_url %>quotes method=quotespostquotes>
  <%= auth_token_input %>
  <input type=quoteshiddenquotes name=quotescomment[link_id]quotes value=quotes<%= @link.id %>quotes>
  <label>
    Comment
    <input type=quotestextquotes name=quotescomment[body]quotes value=quotesquotes>
  </label>
  <input type=quotessubmitquotes value=quotesAdd Commentquotes>
</form>
<%= link_to quotesEdit Linkquotes, edit_link_url(@link) %>
<%= link_to quotesLinksquotes, links_url %>

views>sessions>new.html.erb

<h2>Sign In</h2>
<form action=quotes<%= session_url %>quotes method=quotespostquotes>
  <%= auth_token_input %>
  <label for=quotesuser_usernamequotes>
    Username</label>
    <input type=quotestextquotes name=quotesuser[username]quotes value=quotesquotes id=quotesuser_usernamequotes>
  <label>
    Password
    <input type=quotespasswordquotes name=quotesuser[password]quotes value=quotesquotes>
  </label>
  <input type=quotessubmitquotes value=quotesSign Inquotes>
</form>




views>sessions>new.html.erb

<h2>Sign Up</h2>

<form action=quotes<%= users_url %>quotes method=quotespostquotes>
  <%= auth_token_input %>
  <label>
    Username
    <input type=quotestextquotes name=quotesuser[username]quotes value=quotesquotes>
  </label>
  <label>
    Password
    <input type=quotespasswordquotes name=quotesuser[password]quotes value=quotesquotes>
  </label>
  <input type=quotessubmitquotes value=quotesSign Upquotes>
</form>


routes

Links::Application.routes.draw do
  root to: quotessessions#newquotes
  resources :users, only: [:new, :create]
  resource :session, only: [:new, :create, :destroy]
  resources :links
  resources :comments, only: [:create, :destroy]
endquotes
